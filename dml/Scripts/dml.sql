CREATE TABLE TBL_STUDENT(
   ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
   STUDENT_NAME VARCHAR2(255) NOT NULL
);

/*TBL_STUDENT 테이블에서 ID와 STUDENT_NAME 전체 조회*/
SELECT ID, STUDENT_NAME FROM TBL_STUDENT;

INSERT INTO TBL_STUDENT (ID, STUDENT_NAME)
VALUES(1, '한동석');

UPDATE TBL_STUDENT 
SET STUDENT_NAME = '홍길동'
WHERE ID = 1;

DELETE FROM TBL_STUDENT
WHERE ID = 1;
/**********************************************************************/
CREATE TABLE TBL_ZOO(
   ID NUMBER CONSTRAINT PK_ZOO PRIMARY KEY,
   ZOO_NAME VARCHAR2(255),
   ZOO_ADDRESS VARCHAR2(255),
   ZOO_ADDRESS_DETAIL VARCHAR2(255),
   ZOO_MAX_ANIMAL NUMBER DEFAULT 0
);

CREATE TABLE TBL_ANIMAL(
   ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   ANIMAL_NAME VARCHAR2(255),
   ANIMAL_TYPE VARCHAR2(255),
   ANIMAL_AGE NUMBER DEFAULT 0,
   ANIMAL_HEIGHT NUMBER(16, 5),
   ANIMAL_WEIGHT NUMBER(16, 5),
   ZOO_ID NUMBER,
   CONSTRAINT FK_ANIMAL_ZOO FOREIGN KEY(ZOO_ID)
   REFERENCES TBL_ZOO(ID)
);

ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_HEIGHT NUMBER(16, 5));
ALTER TABLE TBL_ANIMAL MODIFY(ANIMAL_WEIGHT NUMBER(16, 5));

/*시퀀스를 직접 만들어서 사용해야 한다.*/
CREATE SEQUENCE SEQ_ZOO;

SELECT * FROM TBL_ZOO;

/*INSERT INTO TBL_ZOO(ID, ZOO_NAME, ZOO_ADDRESS, ZOO_ADDRESS_DETAIL, ZOO_MAX_ANIMAL)
VALUES(SEQ_ZOO.NEXTVAL, '서울랜드', '서울', '랜드', 100);*/
INSERT INTO TBL_ZOO
VALUES(SEQ_ZOO.NEXTVAL, '애버랜드', '경기도', '용인', 500);

SELECT ID, ZOO_NAME, ZOO_ADDRESS, ZOO_ADDRESS_DETAIL, ZOO_MAX_ANIMAL FROM TBL_ZOO;

UPDATE TBL_ZOO
SET ZOO_MAX_ANIMAL = 5000
WHERE ZOO_NAME = '애버랜드';

DELETE FROM TBL_ZOO
WHERE ID = 1;

CREATE SEQUENCE SEQ_ANIMAL;

SELECT * FROM TBL_ANIMAL;

INSERT INTO TBL_ANIMAL
VALUES(SEQ_ANIMAL.NEXTVAL, '사자', '맹수', 3, 87.5, 70.789, 2);

INSERT INTO TBL_ANIMAL
VALUES(SEQ_ANIMAL.NEXTVAL, '악어', '도마뱀', 12, 300.5, 180.789, 2);

/*애버랜드(2) 동물원의 동물만 조회*/
SELECT ID, ANIMAL_NAME, ANIMAL_TYPE, ANIMAL_AGE, ANIMAL_HEIGHT, ANIMAL_WEIGHT, ZOO_ID 
FROM TBL_ANIMAL
WHERE ZOO_ID = 2;

/**********************************************************************/
CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE
);

CREATE TABLE TBL_PRODUCT(
   ID NUMBER CONSTRAINT PK_PRODUCT PRIMARY KEY,
   PRODUCT_NAME VARCHAR2(255) NOT NULL,
   PRODUCT_PRICE NUMBER DEFAULT 0,
   PRODUCT_STOCK NUMBER DEFAULT 0
);

CREATE TABLE TBL_ORDER(
   ID NUMBER CONSTRAINT PK_ORDER PRIMARY KEY,
   ORDER_DATE DATE DEFAULT CURRENT_TIMESTAMP,
   MEMBER_ID NUMBER,
   PRODUCT_ID NUMBER,
   CONSTRAINT FK_ORDER_MEMBER FOREIGN KEY(MEMBER_ID)
   REFERENCES TBL_MEMBER(ID),
   CONSTRAINT FK_ORDER_PRODUCT FOREIGN KEY(PRODUCT_ID)
   REFERENCES TBL_PRODUCT(ID)
);

/*각 테이블에 3개 이상씩 정보를 추가하고, 조회한다.*/
CREATE SEQUENCE SEQ_MEMBER;

SELECT * FROM TBL_MEMBER;

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, 'HGD123', 'LOVEHGD', '홍길동', '경기도 구리시', 'HGD123@naver.com', 
TO_DATE('2000-01-01', 'YYYY-MM-DD'));

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, 'YSM123', 'YYSSMM', '양승민', '경기도 성남시', 'YSM@gmail.com', 
TO_DATE('2001-11-11', 'YYYY-MM-DD'));

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, 'CRAZYMAN', 'CRAZYZY', '도라희', '서울특별시', 'crazy@naver.com', 
TO_DATE('1989-10-31', 'YYYY-MM-DD'));

CREATE SEQUENCE SEQ_PRODUCT;

SELECT * FROM TBL_PRODUCT;

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '연필', 1500, 121);

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '컴퓨터', 2000000, 40);

INSERT INTO TBL_PRODUCT
VALUES(SEQ_PRODUCT.NEXTVAL, '사각팬티', 20000, 100);

CREATE SEQUENCE SEQ_ORDER;

SELECT * FROM TBL_ORDER;

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, TO_DATE('1988-10-09','YYYY-MM-DD'), 1, 1);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, TO_DATE('2010-11-12','YYYY-MM-DD'), 1, 3);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, TO_DATE('2024-07-08','YYYY-MM-DD'), 2, 3);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, NULL, 1, 3);

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, DEFAULT, 1, 3);


/*수정 2회*/
/*
SELECT ID, ZOO_NAME, ZOO_ADDRESS, ZOO_ADDRESS_DETAIL, ZOO_MAX_ANIMAL FROM TBL_ZOO;

UPDATE TBL_ZOO
SET ZOO_MAX_ANIMAL = 5000
WHERE ZOO_NAME = '애버랜드';
*/

SELECT ID, MEMBER_ID, MEMBER_PASSWORD, MEMBER_NAME, MEMBER_ADDRESS, MEMBER_EMAIL, MEMBER_BIRTH FROM TBL_MEMBER;

UPDATE TBL_MEMBER
SET MEMBER_ADDRESS = '경상북도 경주시'
WHERE MEMBER_NAME = '도라희';

UPDATE TBL_MEMBER
SET MEMBER_EMAIL = '746aa1357@gmail.com'
WHERE MEMBER_ID = 'YSM123';


/*삭제 2회*/
/*
DELETE FROM TBL_ZOO
WHERE ID = 1;
*/

DELETE FROM TBL_ORDER
WHERE ID = 3;

DELETE FROM TBL_MEMBER
WHERE ID = 3;

/*중고차, 차주, 등록증 DB 생성*/

CREATE TABLE TBL_CAR(
	ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
	BRAND VARCHAR2(255) NOT NULL,
	MODEL VARCHAR2(255) NOT NULL,
	PRICE NUMBER NOT NULL,
	RELEASED_DATE DATE NOT NULL
);

CREATE TABLE TBL_OWNER(
	ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
	NAME VARCHAR2(255) NOT NULL,
	PHONE VARCHAR2(255) NOT NULL,
	ADDRESS VARCHAR2(255) NOT NULL
);

CREATE TABLE TBL_REGISTRATION(
	ID NUMBER CONSTRAINT PK_REGISTRATION PRIMARY KEY,
	CAR_ID NUMBER NOT NULL,
	OWNER_ID NUMBER NOT NULL,
	CONSTRAINT FK_REGISTRAION_CAR FOREIGN KEY(CAR_ID)
	REFERENCES TBL_CAR(ID),
	CONSTRAINT FK_REGISTRAION_OWNER FOREIGN KEY(OWNER_ID)
	REFERENCES TBL_OWNER(ID)
);

/*
CREATE SEQUENCE SEQ_ORDER;

SELECT * FROM TBL_ORDER;

INSERT INTO TBL_ORDER
VALUES(SEQ_ORDER.NEXTVAL, TO_DATE('1988-10-09','YYYY-MM-DD'), 1, 1);
*/

CREATE SEQUENCE SEQ_CAR;

SELECT * FROM TBL_CAR;

INSERT INTO TBL_CAR
VALUES(SEQ_CAR.NEXTVAL, '현대', '제네시스루', 40000000, TO_DATE('2020-01-01','YYYY-MM-DD'));

INSERT INTO TBL_CAR
VALUES(SEQ_CAR.NEXTVAL, '기아', 'K3', 20000000, TO_DATE('2018-03-04','YYYY-MM-DD'));

/*SELECT * FROM TBL_OWNER;

SELECT * FROM TBL_REGISTRATION;*/

/******************************************************************************************************************/

CREATE SEQUENCE SEQ_OWNER;
CREATE SEQUENCE SEQ_PET;

CREATE TABLE TBL_OWNER(
   ID NUMBER CONSTRAINT PK_OWNER PRIMARY KEY,
   OWNER_NAME VARCHAR2(255) NOT NULL,
   OWNER_AGE NUMBER,
   OWNER_PHONE VARCHAR2(255) NOT NULL,
   OWNER_ADDRESS VARCHAR2(255)
);

CREATE TABLE TBL_PET(
   ID NUMBER CONSTRAINT PK_PET PRIMARY KEY,
   PET_ILL_NAME VARCHAR2(255),
   PET_NAME VARCHAR2(255),
   PET_AGE NUMBER,
   WEIGHT NUMBER(4, 2),
   OWNER_ID NUMBER,
   CONSTRAINT FK_PET_OWNER FOREIGN KEY(OWNER_ID)
   REFERENCES TBL_OWNER(ID)
);

ALTER TABLE TBL_PET RENAME COLUMN WEIGHT TO PET_WEIGHT;

INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '한동석', 20, '01012341234', '경기도');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '홍길동', 37, '01087879898', '서울');
INSERT INTO TBL_OWNER
(ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS)
VALUES(SEQ_OWNER.NEXTVAL, '이순신', 50, '01044445555', '대구');

SELECT ID, OWNER_NAME, OWNER_AGE, OWNER_PHONE, OWNER_ADDRESS 
FROM TBL_OWNER;

INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '장염', '뽀삐', 4, 10.45, 1);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '감기', '달구', 12, 14.25, 2);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '탈골', '댕댕', 7, 8.46, 3);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '염좌', '쿠키', 11, 5.81, 2);
INSERT INTO TBL_PET
(ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID)
VALUES(SEQ_PET.NEXTVAL, '충치', '바둑', 1, 3.47, 3);

SELECT ID, PET_ILL_NAME, PET_NAME, PET_AGE, PET_WEIGHT, OWNER_ID
FROM TBL_PET;

/*몸무게가 8kg 미만인 반려동물들의 주인에게 모두 전화를 해야한다*/
SELECT PET_ILL_NAME, PET_NAME, PET_WEIGHT, OWNER_ID, TBL_OWNER.OWNER_NAME, TBL_OWNER.OWNER_PHONE
FROM TBL_OWNER JOIN TBL_PET 
ON TBL_OWNER.ID = TBL_PET.OWNER_ID AND PET_WEIGHT < 8;

/*이순신이 키우는 반려동물의 병명을 조회한다. */
SELECT PET_ILL_NAME, PET_NAME, PET_WEIGHT, OWNER_ID, TBL_OWNER.OWNER_NAME, TBL_OWNER.OWNER_PHONE
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.OWNER_ID AND TBL_OWNER.OWNER_NAME = '이순신';

/*나이가 5살보다 많은 반려동물의 주인 전체 정보를 조회한다.*/
SELECT  PET_NAME, PET_AGE, OWNER_ID, TBL_OWNER.*
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.OWNER_ID AND PET_AGE > 5;

SELECT TBL_PET.*, TBL_OWNER.*
FROM TBL_OWNER JOIN TBL_PET
ON TBL_OWNER.ID = TBL_PET.OWNER_ID AND OWNER_NAME = '홍길동';

/*AS: 알리아스(별칭)
 * 
 * 테이블명 혹은 컬럼명 뒤에 AS를 붙여서 원하는 이름을 설정할 수 있다.
 * 이후부터는 설정한 이름으로 사용하면 된다.
 * SELECT절에는 AS를 작성해도 괜찮지만, FROM절에서는 AS를 작성하면 안된다.
 * 이럴 때에는 AS자리에 띄어쓰기 후 작성하도록 한다.
 * 
 * */
SELECT 
   O.ID "주인 번호", O.OWNER_NAME "SELECT", O.OWNER_AGE, 
   O.OWNER_PHONE, O.OWNER_ADDRESS,
   P.PET_NAME, P.PET_AGE
FROM TBL_OWNER O JOIN TBL_PET P 
ON O.ID = P.OWNER_ID AND P.PET_AGE > 5;

/*CONCATENATION: 연결
 * 
 * "안" + "녕": JAVA
 * '안' || '녕': ORACLE
 * 
 * */

SELECT O.OWNER_NAME || '님의 반려동물은 ' || P.PET_NAME || '입니다.' AS 자기소개
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID;

/*
 * LIKE: 포함된 문자열 값을 찾고, 문자의 개수도 제한을 줄 수 있다.
 *
 * %: 모든 것
 * _: 글자 수
 * 
 * 예시
 * '%A'   : A로 끝나는 모든 값
 * 'A%'   : A로 시작하는 모든 값
 * 'A__': A로 시작하면서 3글자인 값
 * '_A'   : A로 끝나면서 2글자인 값
 * '%A%': A가 포함된 값 
 * 
 * */

/*반려동물 이름에서 '뽀'가 포함된 반려동물의 주인 정보 조회*/
SELECT P.PET_NAME, O.ID, O.OWNER_NAME, O.OWNER_AGE, O.OWNER_PHONE, O.OWNER_ADDRESS
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID 
WHERE PET_NAME LIKE '%뽀%';
/*핸드폰 번호에 '0101234'로 시작하는 주인의 반려동물 전체 조회*/
SELECT P.PET_NAME, O.OWNER_NAME, O.OWNER_PHONE
FROM TBL_OWNER O JOIN TBL_PET P
ON O.ID = P.OWNER_ID AND O.OWNER_PHONE LIKE '0101234%';
/*반려동물 병명에 '염'이 들어가있지 않는 반려동물 전체 정보 조회*/
SELECT P.ID, P.PET_NAME, P.PET_ILL_NAME, P.PET_AGE, P.PET_WEIGHT, P.OWNER_ID
FROM TBL_PET P
WHERE NOT P.PET_ILL_NAME LIKE '%염%';

/******************************************************************************************************************/
/**********************************************************************/

DROP SEQUENCE SEQ_APPLY;
CREATE SEQUENCE SEQ_KINDERGARTEN;
CREATE SEQUENCE SEQ_PARENT;
CREATE SEQUENCE SEQ_CHILD;
CREATE SEQUENCE SEQ_FIELD_TRIP;
CREATE SEQUENCE SEQ_FILE;
CREATE SEQUENCE SEQ_FIELD_TRIP_FILE;
CREATE SEQUENCE SEQ_MEMBER;
CREATE SEQUENCE SEQ_APPLY;

CREATE TABLE TBL_KINDERGARTEN(
   ID NUMBER CONSTRAINT PK_KINDERGARTEN PRIMARY KEY,
   KINDERGARTEN_NAME VARCHAR2(255),
   KINDERGARTEN_ADDRESS VARCHAR2(255)
);

CREATE TABLE TBL_PARENT(
   ID NUMBER CONSTRAINT PK_PARENT PRIMARY KEY,
   PARENT_NAME VARCHAR2(255) NOT NULL,
   PARENT_ADDRESS VARCHAR2(255) NOT NULL,
   PARENT_PHONE VARCHAR2(255) NOT NULL,
   PARENT_GENDER NUMBER DEFAULT 3
);

/*1: 여자, 2: 남자, 3: 선택안함*/
CREATE TABLE TBL_CHILD(
   ID NUMBER CONSTRAINT PK_CHILD PRIMARY KEY,
   CHILD_NAME VARCHAR2(255) NOT NULL,
   CHILD_AGE NUMBER NOT NULL,
   CHILD_GENDER NUMBER DEFAULT 3,
   PARENT_ID NUMBER,
   CONSTRAINT FK_CHILD_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID)
);

CREATE TABLE TBL_FIELD_TRIP(
   ID NUMBER CONSTRAINT PK_FIELD_TRIP PRIMARY KEY,
   FIELD_TRIP_TITLE VARCHAR2(255),
   FIELD_TRIP_CONTENT VARCHAR2(255),
   KINDERGARTEN_ID NUMBER,
   CONSTRAINT FK_FIELD_TRIP_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_FILE(
   ID NUMBER CONSTRAINT PK_FILE PRIMARY KEY,
   FILE_NAME VARCHAR2(255),
   FILE_PATH VARCHAR2(255),
   FILE_SIZE NUMBER
);

CREATE TABLE TBL_FIELD_TRIP_FILE(
   ID NUMBER CONSTRAINT PK_FIELD_DRIP_FILE PRIMARY KEY,
   FIELD_TRIP_ID NUMBER NOT NULL,
   CONSTRAINT FK_FIELD_TRIP_FILE_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID),
   CONSTRAINT FK_FIELD_TRIP_FILE_FILE FOREIGN KEY(ID)
   REFERENCES TBL_FILE(ID)
);

CREATE TABLE TBL_MEMBER(
   ID NUMBER CONSTRAINT PK_MEMBER PRIMARY KEY,
   MEMBER_ID VARCHAR2(255) CONSTRAINT UK_MEMBER UNIQUE NOT NULL,
   MEMBER_PASSWORD VARCHAR2(255) NOT NULL,
   MEMBER_NAME VARCHAR2(255) NOT NULL,
   MEMBER_ADDRESS VARCHAR2(255) NOT NULL,
   MEMBER_EMAIL VARCHAR2(255),
   MEMBER_BIRTH DATE,
   KINDERGARTEN_ID NUMBER,
   CONSTRAINT FK_MEMBER_KINDERGARTEN FOREIGN KEY(KINDERGARTEN_ID)
   REFERENCES TBL_KINDERGARTEN(ID)
);

CREATE TABLE TBL_APPLY(
   ID NUMBER CONSTRAINT PK_APPLY PRIMARY KEY,
   PARENT_ID NUMBER NOT NULL,
   FIELD_TRIP_ID NUMBER NOT NULL,
   CONSTRAINT FK_APPLY_PARENT FOREIGN KEY(PARENT_ID)
   REFERENCES TBL_PARENT(ID),
   CONSTRAINT FK_APPLY_FIELD_TRIP FOREIGN KEY(FIELD_TRIP_ID)
   REFERENCES TBL_FIELD_TRIP(ID)
);

INSERT INTO TBL_PARENT
(ID, PARENT_NAME, PARENT_ADDRESS, PARENT_PHONE)
VALUES(SEQ_PARENT.NEXTVAL, '한동석', '경기도', '01012341234');
INSERT INTO TBL_PARENT
(ID, PARENT_NAME, PARENT_ADDRESS, PARENT_PHONE)
VALUES(SEQ_PARENT.NEXTVAL, '홍길동', '서울', '01012341235');
INSERT INTO TBL_PARENT
(ID, PARENT_NAME, PARENT_ADDRESS, PARENT_PHONE)
VALUES(SEQ_PARENT.NEXTVAL, '이순신', '대구', '01012345654');
INSERT INTO TBL_PARENT
(ID, PARENT_NAME, PARENT_ADDRESS, PARENT_PHONE)
VALUES(SEQ_PARENT.NEXTVAL, '장보고', '광주', '01012845234');

SELECT * FROM TBL_PARENT;

INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '또치', 5, 1, 2);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '둘리', 7, 2, 2);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '도너', 4, 1, 1);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '마이콜', 4, 2, 3);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '짱구', 5, 2, 4);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '짱아', 5, 1, 4);
INSERT INTO TBL_CHILD
(ID, CHILD_NAME, CHILD_AGE, CHILD_GENDER, PARENT_ID)
VALUES(SEQ_CHILD.NEXTVAL, '신형만', 12, 1, 2);

SELECT * FROM TBL_CHILD;

DELETE FROM TBL_CHILD
WHERE ID = 3;

INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 2, 1);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 2, 2);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 3, 6);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 4, 7);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 1, 5);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 2, 3);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 1, 7);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 1, 6);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 4, 1);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 4, 5);
INSERT INTO TBL_APPLY
(ID, PARENT_ID, FIELD_TRIP_ID)
VALUES(SEQ_APPLY.NEXTVAL, 3, 3);

SELECT * FROM TBL_APPLY;
SELECT * FROM TBL_FIELD_TRIP;

INSERT INTO TBL_KINDERGARTEN
(ID, KINDERGARTEN_NAME, KINDERGARTEN_ADDRESS)
VALUES(SEQ_KINDERGARTEN.NEXTVAL, '병설유치원', '경기도 고양시');
INSERT INTO TBL_KINDERGARTEN
(ID, KINDERGARTEN_NAME, KINDERGARTEN_ADDRESS)
VALUES(SEQ_KINDERGARTEN.NEXTVAL, '파랑새유치원', '서울시 강남구');
INSERT INTO TBL_KINDERGARTEN
(ID, KINDERGARTEN_NAME, KINDERGARTEN_ADDRESS)
VALUES(SEQ_KINDERGARTEN.NEXTVAL, '불교유치원', '경기도 고양시');
INSERT INTO TBL_KINDERGARTEN
(ID, KINDERGARTEN_NAME, KINDERGARTEN_ADDRESS)
VALUES(SEQ_KINDERGARTEN.NEXTVAL, '세화유치원', '경기도 고양시');
INSERT INTO TBL_KINDERGARTEN
(ID, KINDERGARTEN_NAME, KINDERGARTEN_ADDRESS)
VALUES(SEQ_KINDERGARTEN.NEXTVAL, '대명유치원', '경기도 고양시');

SELECT * FROM TBL_KINDERGARTEN;

INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '어서와 매미농장', '매미 잡자 어서와', 1);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '아이스크림 빨리 먹기 대회', '아이스크림 누가 더 잘먹나', 3);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '고구마 심기', '고구마가 왕 커요', 2);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '숭어 얼음 낚시', '숭어 잡자 추워도 참아', 4);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '커피 체험 공장', '커비 빈 객체화', 4);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '치즈 제작하기', '여기 치즈 저기 치즈 전부 다 치즈', 4);
INSERT INTO TBL_FIELD_TRIP(ID, FIELD_TRIP_TITLE, FIELD_TRIP_CONTENT, KINDERGARTEN_ID)
VALUES(SEQ_FIELD_TRIP.NEXTVAL, '동물 타보기', '이리야!', 2);

SELECT * FROM TBL_FIELD_TRIP;

/*집계 함수
 * 
 * 평균 AVG()
 * 최대값 MAX()
 * 최소값 MIN()
 * 총 합 SUM()
 * 개수 COUNT()
 * 
 * */

/*체험학습의 총 개수*/
SELECT COUNT(ID) FROM TBL_FIELD_TRIP;
SELECT MAX(ID) FROM TBL_FIELD_TRIP;
SELECT MIN(ID) FROM TBL_FIELD_TRIP;
SELECT AVG(ID) FROM TBL_FIELD_TRIP;
SELECT ROUND(AVG(KINDERGARTEN_ID), 2) AS "AVG" FROM TBL_FIELD_TRIP;
SELECT SUM(ID) FROM TBL_FIELD_TRIP;

/*GROUP BY: ~별
 * 
 * 
 * */

/*가장 인기있는 체험학습의 지원자 수를 조회한다.*/
SELECT MAX(COUNT(ID)) FROM TBL_APPLY
GROUP BY FIELD_TRIP_ID;

/*각 체험학습 별 지원자들의 평균 나이를 조회한다.*/
SELECT FIELD_TRIP_ID, AVG(C.CHILD_AGE)
FROM TBL_APPLY A JOIN TBL_PARENT P
ON A.PARENT_ID = P.ID
INNER JOIN TBL_CHILD C
ON C.PARENT_ID = P.ID
GROUP BY FIELD_TRIP_ID;

/*부모들의 자녀 수*/
SELECT COUNT(C.ID)
FROM TBL_CHILD C JOIN TBL_PARENT P
ON C.PARENT_ID = P.ID
GROUP BY P.ID;

/*부모들의 평균 자녀 수*/
SELECT SUM(COUNT(C.ID))/COUNT(P.ID)
FROM TBL_CHILD C JOIN TBL_PARENT P
ON C.PARENT_ID = P.ID
GROUP BY P.ID;

/*각 유치원들의 체험학습 진행 건수*/
SELECT COUNT(FT.ID)
FROM TBL_FIELD_TRIP FT JOIN TBL_KINDERGARTEN K
ON FT.KINDERGARTEN_ID = K.ID
GROUP BY K.ID;

/*유치원들의 평균 체험학습 진행 건수*/
SELECT SUM(COUNT(FT.ID))/COUNT(K.ID)
FROM TBL_FIELD_TRIP FT JOIN TBL_KINDERGARTEN K
ON FT.KINDERGARTEN_ID = K.ID
GROUP BY K.ID;








